name: Build and Package DeployTool

on:
  push:
    branches:
      - main  # Trigger the workflow on pushing to the 'main' branch

jobs:
  build_and_package:
    runs-on: windows-latest  # Use the latest Windows runner provided by GitHub

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true  # Ensure submodules are also checked out if your project includes them

    - name: Install Visual Studio 2019 (MSBuild setup)
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '16.0'  # Specify Visual Studio version (for 2019, use '16.0')

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        platform: win64
        dir: ${{ github.workspace }}/build/Qt  # Install Qt to the build/Qt directory

    - name: Set up Visual Studio build environment
      shell: powershell
      run: |
        # Use vswhere to find the path of the latest installed Visual Studio version
        $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        Write-Host "Found Visual Studio at: $vsPath"
        
        # Run the VsDevCmd.bat script to set up the environment
        $vsDevCmdPath = Join-Path $vsPath 'Common7\Tools\VsDevCmd.bat'
        
        if (Test-Path $vsDevCmdPath) {
          & $vsDevCmdPath  # This sets up the Visual Studio command-line environment
          Write-Host "Visual Studio environment setup complete."
        } else {
          Write-Host "VsDevCmd.bat not found at expected location."
          exit 1

        # Set PATH to include Qt
        $env:PATH += ";${{ github.workspace }}/build/Qt/5.15.2/msvc2019_64/bin"
        Write-Host "Qt and Visual Studio environment setup complete."

    - name: Build the project
      shell: powershell
      run: |
        Write-Host "Current working directory: $(pwd)"  # Output current directory
        cd ${{ github.workspace }}/.github/workflows  # Navigate to the correct directory
        if (Test-Path "DeployTool.pro") {
          Write-Host "DeployTool.pro file found, running qmake..."
          qmake .\DeployTool.pro -o ..\build\Makefile  # Generate Makefile using qmake
          Write-Host "Running nmake to build the project..."
          nmake -C ..\build  # Build project using nmake
        } else {
          Write-Host "DeployTool.pro file not found. Please check the path."
          exit 1  # Exit with error code if the .pro file is not found
        }

    - name: Package application with windeployqt
      shell: powershell
      run: |
        windeployqt --dir build/release --force build/DeployTool.exe
        Compress-Archive -Path build/release/* -DestinationPath build/DeployTool.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: DeployTool
        path: build/DeployTool.zip
