name: Build and Package DeployTool

on:
  push:
    branches:
      - main  # 可以根据实际情况修改触发工作流的分支，比如'master'等

jobs:
  build_and_package:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true  # 如果项目包含子模块，添加此参数以确保子模块也被拉取

    - name: Create build directory
      shell: powershell
      run: |
        if (!(Test-Path -Path build)) {
          New-Item -ItemType Directory -Path build -Force
        }
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        platform: win64
        dir: ${{ github.workspace }}/build/Qt  # 修改Qt安装目录为build/Qt

    - name: Configure build environment
      shell: powershell
      run: |
        $env:PATH += ";${{ github.workspace }}/build/Qt/5.15.2/msvc2019_64/bin"  # 修改PATH环境变量配置，指向build/Qt下的bin目录
        # 这里添加mingw32-make所在路径到PATH环境变量（假设mingw安装在C:\mingw目录下，按实际安装情况调整路径）
        $env:PATH += ";C:\mingw\bin"
        [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, [System.EnvironmentVariableTarget]::Machine)

    - name: Build the project
      shell: powershell
      run: |
        cd ${{ github.workspace }}/.github/workflows/  # 切换到文件所在的.github/workflows/目录
        qmake your_project_name.pro -o build/Makefile
        mingw32-make -C build

    - name: Package application with windeployqt
      shell: powershell
      run: |
        windeployqt --dir build/release --force build/DeployTool.exe  # 确保windeployqt操作的可执行文件在build目录下
        Compress-Archive -Path build/release/* -DestinationPath build/DeployTool.zip  # 压缩文件也放在build目录下

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: DeployTool
        path: build/DeployTool.zip  # 上传build目录下的压缩文件

    - name: Check build result
      if: steps['Build the project'].outcome!= 'success'
      run: |
        echo "项目构建失败，请检查构建日志以查找原因。"
        exit 1
